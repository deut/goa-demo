// Code generated by goa v3.20.1, DO NOT EDIT.
//
// hamster service
//
// Command:
// $ goa gen goa-demo/design

package hamster

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Hamsters distribution API
type Service interface {
	// List hamsters with optional pagination.
	List(context.Context) (res []*Hamster, err error)
	// Add newborn hamster
	Create(context.Context, *HamsterPayload) (res *Hamster, err error)
	// Choose your hamster
	Show(context.Context, *ShowPayload) (res *Hamster, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "hamster"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "hamster"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"list", "create", "show"}

// Hamster is the result type of the hamster service create method.
type Hamster struct {
	// Unique concert ID
	ID string
	// Name of hamster
	Name string
	// List of colors the hamster can have.
	Colors []string
}

// HamsterPayload is the payload type of the hamster service create method.
type HamsterPayload struct {
	// Name of hamster
	Name *string
	// List of colors the hamster can have.
	Colors []string
}

// ShowPayload is the payload type of the hamster service show method.
type ShowPayload struct {
	// Hamster UUID
	HamsterID string
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_found", false, false, false)
}
