// Code generated by goa v3.20.1, DO NOT EDIT.
//
// hamster HTTP client CLI support package
//
// Command:
// $ goa gen goa-demo/design

package cli

import (
	"flag"
	"fmt"
	hamsterc "goa-demo/gen/http/hamster/client"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `hamster (list|create|show)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` hamster list` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		hamsterFlags = flag.NewFlagSet("hamster", flag.ContinueOnError)

		hamsterListFlags = flag.NewFlagSet("list", flag.ExitOnError)

		hamsterCreateFlags    = flag.NewFlagSet("create", flag.ExitOnError)
		hamsterCreateBodyFlag = hamsterCreateFlags.String("body", "REQUIRED", "")

		hamsterShowFlags         = flag.NewFlagSet("show", flag.ExitOnError)
		hamsterShowHamsterIDFlag = hamsterShowFlags.String("hamster-id", "REQUIRED", "Hamster UUID")
	)
	hamsterFlags.Usage = hamsterUsage
	hamsterListFlags.Usage = hamsterListUsage
	hamsterCreateFlags.Usage = hamsterCreateUsage
	hamsterShowFlags.Usage = hamsterShowUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "hamster":
			svcf = hamsterFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "hamster":
			switch epn {
			case "list":
				epf = hamsterListFlags

			case "create":
				epf = hamsterCreateFlags

			case "show":
				epf = hamsterShowFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "hamster":
			c := hamsterc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list":
				endpoint = c.List()
			case "create":
				endpoint = c.Create()
				data, err = hamsterc.BuildCreatePayload(*hamsterCreateBodyFlag)
			case "show":
				endpoint = c.Show()
				data, err = hamsterc.BuildShowPayload(*hamsterShowHamsterIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// hamsterUsage displays the usage of the hamster command and its subcommands.
func hamsterUsage() {
	fmt.Fprintf(os.Stderr, `Hamsters distribution API
Usage:
    %[1]s [globalflags] hamster COMMAND [flags]

COMMAND:
    list: List hamsters with optional pagination.
    create: Add newborn hamster
    show: Choose your hamster

Additional help:
    %[1]s hamster COMMAND --help
`, os.Args[0])
}
func hamsterListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] hamster list

List hamsters with optional pagination.

Example:
    %[1]s hamster list
`, os.Args[0])
}

func hamsterCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] hamster create -body JSON

Add newborn hamster
    -body JSON: 

Example:
    %[1]s hamster create --body '{
      "colors": [
         "brown",
         "white"
      ],
      "name": "Fluffy"
   }'
`, os.Args[0])
}

func hamsterShowUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] hamster show -hamster-id STRING

Choose your hamster
    -hamster-id STRING: Hamster UUID

Example:
    %[1]s hamster show --hamster-id "35ee1fbe-e698-4fd8-8ae1-a735892b922c"
`, os.Args[0])
}
