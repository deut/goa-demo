// Code generated by goa v3.20.1, DO NOT EDIT.
//
// hamster HTTP client CLI support package
//
// Command:
// $ goa gen goa-demo/design

package client

import (
	"encoding/json"
	"fmt"
	hamster "goa-demo/gen/hamster"

	goa "goa.design/goa/v3/pkg"
)

// BuildCreatePayload builds the payload for the hamster create endpoint from
// CLI flags.
func BuildCreatePayload(hamsterCreateBody string) (*hamster.HamsterPayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(hamsterCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"colors\": [\n         \"brown\",\n         \"white\"\n      ],\n      \"name\": \"Fluffy\"\n   }'")
		}
	}
	v := &hamster.HamsterPayload{
		Name: body.Name,
	}
	if body.Colors != nil {
		v.Colors = make([]string, len(body.Colors))
		for i, val := range body.Colors {
			v.Colors[i] = val
		}
	}

	return v, nil
}

// BuildShowPayload builds the payload for the hamster show endpoint from CLI
// flags.
func BuildShowPayload(hamsterShowHamsterID string) (*hamster.ShowPayload, error) {
	var err error
	var hamsterID string
	{
		hamsterID = hamsterShowHamsterID
		err = goa.MergeErrors(err, goa.ValidateFormat("hamsterID", hamsterID, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &hamster.ShowPayload{}
	v.HamsterID = hamsterID

	return v, nil
}
