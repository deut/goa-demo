// Code generated by goa v3.20.1, DO NOT EDIT.
//
// hamster HTTP client types
//
// Command:
// $ goa gen goa-demo/design

package client

import (
	hamster "goa-demo/gen/hamster"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "hamster" service "create" endpoint
// HTTP request body.
type CreateRequestBody struct {
	// Name of hamster
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// List of colors the hamster can have.
	Colors []string `form:"colors,omitempty" json:"colors,omitempty" xml:"colors,omitempty"`
}

// ListResponseBody is the type of the "hamster" service "list" endpoint HTTP
// response body.
type ListResponseBody []*HamsterResponse

// CreateResponseBody is the type of the "hamster" service "create" endpoint
// HTTP response body.
type CreateResponseBody struct {
	// Unique concert ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of hamster
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// List of colors the hamster can have.
	Colors []string `form:"colors,omitempty" json:"colors,omitempty" xml:"colors,omitempty"`
}

// ShowResponseBody is the type of the "hamster" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	// Unique concert ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of hamster
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// List of colors the hamster can have.
	Colors []string `form:"colors,omitempty" json:"colors,omitempty" xml:"colors,omitempty"`
}

// ShowNotFoundResponseBody is the type of the "hamster" service "show"
// endpoint HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// HamsterResponse is used to define fields on response body types.
type HamsterResponse struct {
	// Unique concert ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of hamster
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// List of colors the hamster can have.
	Colors []string `form:"colors,omitempty" json:"colors,omitempty" xml:"colors,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "hamster" service.
func NewCreateRequestBody(p *hamster.HamsterPayload) *CreateRequestBody {
	body := &CreateRequestBody{
		Name: p.Name,
	}
	if p.Colors != nil {
		body.Colors = make([]string, len(p.Colors))
		for i, val := range p.Colors {
			body.Colors[i] = val
		}
	}
	return body
}

// NewListHamsterOK builds a "hamster" service "list" endpoint result from a
// HTTP "OK" response.
func NewListHamsterOK(body []*HamsterResponse) []*hamster.Hamster {
	v := make([]*hamster.Hamster, len(body))
	for i, val := range body {
		v[i] = unmarshalHamsterResponseToHamsterHamster(val)
	}

	return v
}

// NewCreateHamsterCreated builds a "hamster" service "create" endpoint result
// from a HTTP "Created" response.
func NewCreateHamsterCreated(body *CreateResponseBody) *hamster.Hamster {
	v := &hamster.Hamster{
		ID:   *body.ID,
		Name: *body.Name,
	}
	v.Colors = make([]string, len(body.Colors))
	for i, val := range body.Colors {
		v.Colors[i] = val
	}

	return v
}

// NewShowHamsterOK builds a "hamster" service "show" endpoint result from a
// HTTP "OK" response.
func NewShowHamsterOK(body *ShowResponseBody) *hamster.Hamster {
	v := &hamster.Hamster{
		ID:   *body.ID,
		Name: *body.Name,
	}
	v.Colors = make([]string, len(body.Colors))
	for i, val := range body.Colors {
		v.Colors[i] = val
	}

	return v
}

// NewShowNotFound builds a hamster service show endpoint not_found error.
func NewShowNotFound(body *ShowNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateCreateResponseBody runs the validations defined on CreateResponseBody
func ValidateCreateResponseBody(body *CreateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Colors == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("colors", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if len(body.Colors) > 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.colors", body.Colors, len(body.Colors), 1, false))
	}
	return
}

// ValidateShowResponseBody runs the validations defined on ShowResponseBody
func ValidateShowResponseBody(body *ShowResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Colors == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("colors", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if len(body.Colors) > 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.colors", body.Colors, len(body.Colors), 1, false))
	}
	return
}

// ValidateShowNotFoundResponseBody runs the validations defined on
// show_not_found_response_body
func ValidateShowNotFoundResponseBody(body *ShowNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateHamsterResponse runs the validations defined on HamsterResponse
func ValidateHamsterResponse(body *HamsterResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Colors == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("colors", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if len(body.Colors) > 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.colors", body.Colors, len(body.Colors), 1, false))
	}
	return
}
