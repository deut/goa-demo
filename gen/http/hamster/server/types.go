// Code generated by goa v3.20.1, DO NOT EDIT.
//
// hamster HTTP server types
//
// Command:
// $ goa gen goa-demo/design

package server

import (
	hamster "goa-demo/gen/hamster"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "hamster" service "create" endpoint
// HTTP request body.
type CreateRequestBody struct {
	// Name of hamster
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// List of colors the hamster can have.
	Colors []string `form:"colors,omitempty" json:"colors,omitempty" xml:"colors,omitempty"`
}

// ListResponseBody is the type of the "hamster" service "list" endpoint HTTP
// response body.
type ListResponseBody []*HamsterResponse

// CreateResponseBody is the type of the "hamster" service "create" endpoint
// HTTP response body.
type CreateResponseBody struct {
	// Unique concert ID
	ID string `form:"id" json:"id" xml:"id"`
	// Name of hamster
	Name string `form:"name" json:"name" xml:"name"`
	// List of colors the hamster can have.
	Colors []string `form:"colors" json:"colors" xml:"colors"`
}

// ShowResponseBody is the type of the "hamster" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	// Unique concert ID
	ID string `form:"id" json:"id" xml:"id"`
	// Name of hamster
	Name string `form:"name" json:"name" xml:"name"`
	// List of colors the hamster can have.
	Colors []string `form:"colors" json:"colors" xml:"colors"`
}

// ShowNotFoundResponseBody is the type of the "hamster" service "show"
// endpoint HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// HamsterResponse is used to define fields on response body types.
type HamsterResponse struct {
	// Unique concert ID
	ID string `form:"id" json:"id" xml:"id"`
	// Name of hamster
	Name string `form:"name" json:"name" xml:"name"`
	// List of colors the hamster can have.
	Colors []string `form:"colors" json:"colors" xml:"colors"`
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "hamster" service.
func NewListResponseBody(res []*hamster.Hamster) ListResponseBody {
	body := make([]*HamsterResponse, len(res))
	for i, val := range res {
		body[i] = marshalHamsterHamsterToHamsterResponse(val)
	}
	return body
}

// NewCreateResponseBody builds the HTTP response body from the result of the
// "create" endpoint of the "hamster" service.
func NewCreateResponseBody(res *hamster.Hamster) *CreateResponseBody {
	body := &CreateResponseBody{
		ID:   res.ID,
		Name: res.Name,
	}
	if res.Colors != nil {
		body.Colors = make([]string, len(res.Colors))
		for i, val := range res.Colors {
			body.Colors[i] = val
		}
	} else {
		body.Colors = []string{}
	}
	return body
}

// NewShowResponseBody builds the HTTP response body from the result of the
// "show" endpoint of the "hamster" service.
func NewShowResponseBody(res *hamster.Hamster) *ShowResponseBody {
	body := &ShowResponseBody{
		ID:   res.ID,
		Name: res.Name,
	}
	if res.Colors != nil {
		body.Colors = make([]string, len(res.Colors))
		for i, val := range res.Colors {
			body.Colors[i] = val
		}
	} else {
		body.Colors = []string{}
	}
	return body
}

// NewShowNotFoundResponseBody builds the HTTP response body from the result of
// the "show" endpoint of the "hamster" service.
func NewShowNotFoundResponseBody(res *goa.ServiceError) *ShowNotFoundResponseBody {
	body := &ShowNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateHamsterPayload builds a hamster service create endpoint payload.
func NewCreateHamsterPayload(body *CreateRequestBody) *hamster.HamsterPayload {
	v := &hamster.HamsterPayload{
		Name: body.Name,
	}
	if body.Colors != nil {
		v.Colors = make([]string, len(body.Colors))
		for i, val := range body.Colors {
			v.Colors[i] = val
		}
	}

	return v
}

// NewShowPayload builds a hamster service show endpoint payload.
func NewShowPayload(hamsterID string) *hamster.ShowPayload {
	v := &hamster.ShowPayload{}
	v.HamsterID = hamsterID

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.Name != nil {
		if utf8.RuneCountInString(*body.Name) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 1, true))
		}
	}
	if len(body.Colors) > 1 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.colors", body.Colors, len(body.Colors), 1, false))
	}
	return
}
